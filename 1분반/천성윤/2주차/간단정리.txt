# [1장] 자바스크립트와 Node.js 요약

## 1.1. Node.js를 시작하기

- 자바스크립트를 활용한 프론트/ 백 조작.

## 1.2. Node.js를 배우는 이유

- **실시간 웹 페이지 생성**: 사용자가 요청할 때마다 동적 웹 페이지 제공.
- **CRUD 작업 지원**: 콘텐츠의 읽기/쓰기/수정/삭제 가능.

## 1.3. Node.js 설치

- **동작 환경**: Node.js 런타임 필요.
- **설치 방법**: Atom으로 자바스크립트 파일 작성 후 터미널에서 `node [파일명].js` 실행.

## 1.5. Node.js 웹 서버 만들기

- **내장 웹 서버 기능**:
    
    ```jsx
    
    var http = require('http');
    var fs = require('fs');
    var app = http.createServer(function(request, response) {
        var url = request.url;
        if(request.url == '/') {
            url = '/index.html';
        }
        if(request.url == '/favicon.ico') {
            return response.writeHead(404);
        }
        response.writeHead(200);
        response.end(fs.readFileSync(__dirname + url));
    });
    app.listen(3000);
    
    ```
    
    - `response.end()`: 웹 서버가 요청에 응답.

## 1.6. 자바스크립트 문법 - 데이터 타입

- **숫자형**: Number
- **문자열**: String

## 1.7. 자바스크립트 문법 - 변수

- **규칙**: 첫 글자로 숫자 사용 불가, 대소문자 구분, 특수문자는 `_`와 `$`만 가능.

## 1.8. 자바스크립트 문법 - 템플릿 리터럴

- **사용 방법**:
    
    ```jsx
    
    `문자열과 ${변수}`
    
    ```
    

## 1.9. Node.js - URL 이해하기

- **URL 구성 요소**:
    1. **프로토콜**
    2. **호스트**
    3. **포트 번호**
    4. **경로**
    5. **쿼리 스트링**

## 1.10. Node.js - URL로 입력된 값 사용하기

- **쿼리스트링 추출 및 사용**:
    
    ```jsx
    
    var url = require('url');
    var queryData = url.parse(_url, true).query;
    
    ```
    

## 1.11. App - 동적인 웹 페이지 만들기

- **템플릿 리터럴로 동적 페이지**:
    
    ```jsx
    
    var template = `
    <html>
      <body>
        <h1>${queryData.id}</h1>
      </body>
    </html>`;
    response.end(template);
    
    ```
    

## 1.12. Node.js - 파일 읽기

- **fs 모듈 사용**:
    
    ```jsx
    
    var fs = require('fs');
    fs.readFile('Sample.txt', 'utf8', function(err, data) {
      console.log(data);
    });
    
    ```
    

## 1.13. App - 파일을 읽어서 본문 구현

- **파일 내용을 동적으로**:
    
    ```jsx
    
    fs.readFile(`data/${title}`, 'utf8', function(err, description) {
      response.end(template);
    });
    
    ```
    

## 1.18. 자바스크립트 문법 - 콘솔에서 입력받기

- **콘솔 입력값**:
    
    ```jsx
    
    var args = process.argv;
    console.log(args);
    
    ```
    

## 1.19. App - 오류 페이지와 홈페이지 구현

- **오류 페이지**:
    
    ```jsx
    
    response.writeHead(404);
    response.end('Not Found');
    
    ```
    

## 1.23. Node.js - 파일 목록 알아내기

- **파일 목록**:
    
    ```jsx
    
    var fs = require('fs');
    fs.readdir(testFolder, function(err, filelist) {
      console.log(filelist);
    });
    
    ```
    

## 1.24. App - 글 목록 출력하기

- **동적 리스트 생성**:
    
    ```jsx
    
    var list = '<ul>';
    for(var i=0; i < filelist.length; i++) {
      list += `<li><a href="/?id=${filelist[i]}">${filelist[i]}</a></li>`;
    }
    list += '</ul>';
    response.end(template);
    
    ```